# KolibriOS - A Lightweight x86 Operating System

KolibriOS is a hobby operating system for x86-compatible computers, developed entirely in assembly language (primarily FASM) for maximum performance and minimal resource usage. Based on MenuetOS, it implements its own standards and is not POSIX/UNIX compliant.

## Project Overview

**Architecture**: x86 32-bit operating system
**Primary Language**: FASM assembly language
**License**: GPL 2.0
**Philosophy**: Compact, fast, and lean on system resources

## Key Characteristics

- **Assembly-first**: Kernel, drivers, and many applications written in FASM assembly
- **Non-POSIX**: Uses its own system call interface and standards
- **Compact**: Designed for minimal resource usage
- **Self-contained**: Complete OS that fits on a floppy disk
- **Active Development**: Maintained by passionate community of enthusiasts

## Directory Structure

```
kolibrios/
├── kernel/                 # Operating system kernel (FASM assembly)
│   ├── trunk/             # Main kernel code
│   │   ├── kernel.asm     # Main kernel entry point
│   │   ├── core/          # Core kernel functionality
│   │   ├── fs/            # File system drivers
│   │   ├── gui/           # GUI subsystem
│   │   ├── network/       # Network stack
│   │   └── docs/          # Kernel documentation
│   └── branches/          # Experimental kernel branches
├── programs/              # User applications and utilities
│   ├── system/            # System utilities and core apps
│   ├── develop/           # Development tools and IDEs
│   ├── games/             # Games and entertainment
│   ├── media/             # Multimedia applications
│   ├── network/           # Network applications
│   ├── demos/             # Demo applications
│   ├── macros.inc         # Common assembly macros
│   ├── proc32.inc         # 32-bit procedures
│   └── *.lua              # Build system helpers
├── drivers/               # Device drivers (assembly)
│   ├── audio/             # Audio drivers
│   ├── video/             # Video drivers
│   ├── usb/               # USB drivers
│   ├── ethernet/          # Network drivers
│   └── sceletone.asm      # Driver template/skeleton
├── skins/                 # UI themes and window decorations
├── data/                  # System data files and documentation
│   ├── en_US/            # English documentation and resources
│   ├── ru_RU/            # Russian documentation and resources
│   └── common/           # Common system files
├── contrib/               # Third-party libraries and tools
├── _tools/                # Build tools and utilities
├── build.txt              # Comprehensive build instructions
├── CONTRIBUTING.md        # Contribution guidelines
└── README.md              # Project overview
```

## Programming Languages & Technologies

### Primary Languages
- **FASM (Flat Assembler)**: Primary language (~80% of codebase)
  - Used for kernel, drivers, system utilities
  - Direct hardware access and maximum performance
  - Custom macros and includes for common operations

### Secondary Languages
- **C/C++**: Some applications and libraries
- **NASM**: Alternative assembly syntax for some components
- **c--**: Legacy language, being phased out
- **Lua**: Build system configuration (Tup build system)

### Build System
- **Tup**: Modern build system with dependency tracking
- **Tupfile.lua**: Build configuration files throughout project
- **Cross-platform**: Supports Windows and Linux development

## System Architecture

### Kernel Architecture
- **Monolithic kernel**: Single address space for performance
- **Custom system calls**: INT 0x40 interface with function numbers in EAX
- **Memory management**: Custom memory allocator and virtual memory
- **Process management**: Lightweight threading and process model
- **File systems**: FAT32, ext2/3/4, NTFS (read-only)

### System Calls Interface
System calls use `int 0x40` with function number in EAX register:
- Function 0: Define and draw window
- Function 1: Put pixel
- Function 2: Get key from keyboard
- Function 3: Get system time
- Function 4: Draw text string
- Function 5: Delay execution
- Function 70: File system operations
- And many more...

### Driver Model
- **PE DLL format**: Drivers are PE DLL files
- **Standard interface**: Common driver entry points and service functions
- **Hardware abstraction**: Abstraction layer for device access
- **Hot-pluggable**: Dynamic loading and unloading of drivers

## Development Environment

### Required Tools
- **FASM**: Flat Assembler for assembly code
- **GCC Toolchain**: For C/C++ development (KolibriOS-specific build)
- **Tup**: Build system for automated building
- **Text Editor**: Any editor with assembly syntax highlighting

### Development Workflow
1. **Setup**: Install FASM, GCC toolchain, and Tup
2. **Code**: Write application using system API
3. **Build**: Use Tup build system or direct FASM compilation
4. **Test**: Run on KolibriOS system or emulator
5. **Package**: Optionally compress with kpack utility

### Testing Environment
- **Real Hardware**: Boot from floppy, CD, or USB
- **Virtual Machines**: QEMU, VirtualBox, VMware
- **Emulators**: Bochs, PCem for debugging

## File Patterns & Conventions

### Assembly Files (.asm)
- **FASM syntax**: Primary assembly dialect
- **Includes**: Common includes like macros.inc, proc32.inc
- **Structure**: Standard program structure with imports/exports
- **Documentation**: Comments in English and Russian

### Build Files
- **Tupfile.lua**: Tup build configuration
- **Makefile**: Alternative GNU make files
- ***.inc**: Assembly include files with macros and constants

### Documentation
- ***.txt**: Plain text documentation
- ***.md**: Markdown documentation
- **docs/**: Documentation directories

## Key APIs & Libraries

### Core System APIs
- **Window Management**: Window creation, drawing, event handling
- **Graphics**: Pixel operations, drawing primitives, image handling
- **File System**: File operations, directory management
- **Network**: Socket interface, network protocols
- **Audio**: Sound playback and recording
- **Input**: Keyboard and mouse input handling

### Common Libraries
- **console.dll**: Console input/output library
- **box_lib**: GUI controls and widgets
- **buf2d**: 2D graphics buffer library
- **libimg**: Image format handling
- **network.dll**: Network operations

## Contributing Guidelines

### Code Style
- **Assembly**: FASM syntax with consistent indentation
- **Comments**: English preferred, Russian acceptable
- **Naming**: Descriptive names for functions and variables
- **Includes**: Use standard include files

### Development Process
1. **Fork**: Create fork of main repository
2. **Branch**: Create feature branch with descriptive name
3. **Develop**: Implement changes following coding standards
4. **Test**: Thoroughly test changes on target platform
5. **Commit**: Use descriptive commit messages (max 72 chars)
6. **Review**: Submit pull request for code review
7. **Merge**: Changes merged after review approval

### Testing Requirements
- **Functionality**: All features must work as specified
- **Compatibility**: Must not break existing functionality
- **Performance**: Should not significantly impact system performance
- **Memory**: Efficient memory usage required

## Build Instructions

### Quick Build (Single Program)
```bash
# FASM program
fasm program.asm

# C program (requires KolibriOS GCC toolchain)
kos32-gcc -o program program.c
```

### Full System Build
```bash
# Setup (Linux)
sudo apt-get install build-essential mtools mkisofs
# Install FASM, GCC toolchain, and Tup

# Configure
cp tup.config.template tup.config
# Edit tup.config as needed

# Build
tup init
tup
```

## Resources

### Documentation
- **build.txt**: Comprehensive build instructions
- **kernel/trunk/docs/**: Kernel API documentation
- **CONTRIBUTING.md**: Detailed contribution guidelines
- **data/*/docs/**: User documentation in multiple languages

### Community
- **Forums**: http://board.kolibrios.org
- **Git Repository**: https://git.kolibrios.org
- **Builds**: http://builds.kolibrios.org (automated builds)

### Development Tools
- **FASM**: http://flatassembler.net
- **Tup**: http://gittup.org/tup
- **GCC Toolchain**: http://ftp.kolibrios.org/users/Serge/new/Toolchain/

This project represents a unique approach to operating system design, prioritizing simplicity, performance, and direct hardware control over compatibility with existing standards. It's an excellent learning platform for understanding low-level system programming and operating system internals.